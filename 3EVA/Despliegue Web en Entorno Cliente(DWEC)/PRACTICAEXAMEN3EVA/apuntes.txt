PROMESAS

1.Creamos la promesa, con las 2 condiciones que ocurriran

2.Dentro de la función, de alguna manera tenemos que hacer que se 
    pase una y si no la contraria

3.Llamamos a la promesa creada anteriormente.

4.En los 2 puntos, las variables que creamos se guardan con 
el valor de 'Verdadero' y la otra de 'Falso'

5. '.then' va ha pasar si se cumple la primera condición,
si no se ejecutara el '.catch'

let nombrePromesa = new Promise((Verdadero,Falso) =>{
    if(condicion) Verdadero("Enviar lo que queramos");
    else Falso(Error("No se cumple la verdad"));
});

nombrePromesa

.then((variableNueva) => {
    //codigo aquí
})
.catch((variableNueva1) =>{
    //codigo aquí
})
.finally(() =>{
    //Esto es para limpiar recursos o cosas parecidas
})

LOCALSTORAGE

Eventos: BEFOREUNLOAD y LOAD

El primer event listener es para el evento "beforeunload". Cuando este evento se dispara, 
el código guarda el valor actual del volumen del elemento de audio en el localStorage, 
utilizando el método setItem(). De esta manera, el valor del volumen se puede restaurar en 
futuras sesiones del usuario.

window.addEventListener("beforeunload", () => {
    localStorage.setItem("volume", audio.volume);
});

El segundo event listener es para el evento "load". Cuando la página se carga completamente, 
el código lee el valor del volumen almacenado en el localStorage utilizando el 
método getItem(). Si el valor existe, se establece como el valor del volumen 
del elemento de audio. Si el valor no existe, se establece el valor por defecto del volumen
en 1.

window.addEventListener("load", () => {
    audio.volume = localStorage.getItem("volume") || 0.5;
    controlVolume.value = localStorage.getItem("volume") || 0.5;
});

En resumen, estos dos event listeners permiten guardar el valor del volumen en el localStorage
antes de que el usuario abandone la página y restaurar el valor del volumen en futuras 
sesiones del usuario. De esta manera, el usuario puede mantener la configuración de volumen 
preferida para el elemento de audio.

FUNCIONES QUE PODRIAN USARSE.

localStorage.removeItem(): Cuando se le pasa el nombre de una clave por parámetro
eliminará dicha clave del almacenamiento.

localStorage.clear(): Cuando este método es invocado vacía todas las claves del
almacenamiento.

MULTIMEDIA

let audio = document.getElementById("player");

INCIAR SONIDO -> audio.play();

PAUSAR SONIDO -> audio.pause();

MUTEAR SONIDO -> audio.volume = 0;

PASAR ARCHIVO AL MULTIMEDIA -> audio.src;

EVENTOS MULTIMEDIA

Eventos : LOADEDMETADATA - TIMEUPDATE - - INPUT - ENDED

loadedmetadata: se dispara cuando se ha cargado la metadata del archivo de audio, lo que 
incluye la duración del archivo. Este evento es utilizado para mostrar la duración del archivo 
de audio en el reproductor.

audio.addEventListener("loadedmetadata", (e) => {
let minutesDuration = Math.floor(audio.duration / 60);
let secondsDuration = Math.floor(audio.duration % 60);
let duracion = `${minutesDuration}:${secondsDuration
    .toString()
    .padStart(2, "0")}`;

tiempo.innerHTML = `0:00/${duracion}`;
});

timeupdate: se dispara cada vez que el tiempo de reproducción del archivo de audio cambia.
Este evento es utilizado para actualizar la barra de progreso y el tiempo transcurrido del 
archivo de audio en el reproductor.

audio.addEventListener("timeupdate", (e) => {
    let percentComplete = (audio.currentTime / audio.duration) * 100;
    tiempo.value = audio.currentTime;
    let minutes = Math.floor(audio.currentTime / 60);
    let seconds = Math.floor(audio.currentTime % 60);
    let FormatoDelTiempo = `${minutes}:${seconds
        .toString()
        .padStart(2, "0")}`;
    let minutesDuration = Math.floor(audio.duration / 60);
    let secondsDuration = Math.floor(audio.duration % 60);
    let duracion = `${minutesDuration}:${secondsDuration
        .toString()
        .padStart(2, "0")}`;

    tiempo.max = audio.duration;
});

input: Para poder mover la barra y avanzar la música.

tiempo.addEventListener('input', ()=> {
        audio.currentTime = tiempo.value;
})

ended: se dispara cuando la reproducción del archivo de audio ha llegado al final. 
Este evento es utilizado para cambiar a la siguiente canción en la lista de reproducción 
y continuar la reproducción automáticamente.

let nuevoaudio;

audio.addEventListener("ended", () => {
for (let j = 0; j < arrayLi.length; j++) {
    arrayLi[j].style.color = "#dd79bc";
}

if (cont === arrayCanciones.length - 1) {
    cont = 0;
    nuevoaudio = arrayCanciones[0];
    arrayLi[0].style.color = "#917be6";
} else {
    arrayLi[cont + 1].style.color = "#917be6";
    nuevoaudio = arrayCanciones[cont + 1];
    cont++;
}
audio.src = nuevoaudio;
audio.play();
});